@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # int locationX
    # int locationY
    # int speedX
    # int speedY
    # BufferedImage image
    # int width
    # int height
    # boolean isValid

    + FlyingObject(int locationX, int locationY, int speedX, int speedY):void
    + forward():void
    + crash(FlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# int maxHp
    # int hp
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp):void
    + decreaseHp(int decrease):void
    + getHp():int
    + {abstract} shoot():List<Bullet>
    + {abstract} prop():AbstractProp
 }

abstract class AbstractBullet
{
    - int power
    + Bullet(int locationX, int locationY, int speedX, int speedY, int power):void
    + forward():void
	+ getPower():int
}

abstract class AbstractProp{
    - int direction
    + AbstractProp(int locationX, int locationY, int speedX, int speedY, int direction):void
    + forward():void
    + effect():int
}

interface EnemyFactory{
    + creatEnemy(int locationX, int locationY, int speedX, int speedY, int hp):AbstractAircraft
}

interface PropFactory{
    + creatProp(int locationX, int locationY, int speedX, int speedY, int direction):AbstractProp
}

Game ..> AbstractAircraft
Game ..> EnemyFactory
Game ..> AbstractProp
Game ..> PropFactory

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- AbstractBullet
AbstractFlyingObject <|-- AbstractProp

AbstractAircraft <|-- HeroAircraft
AbstractAircraft <|-- MobEnemy
AbstractAircraft <|-- EliteEnemy

EnemyFactory <|-- MobFactory
EnemyFactory <|-- EliteFactory
EnemyFactory <|-- BossFactory

MobFactory ..> MobEnemy
EliteFactory ..> EliteEnemy
BossFactory ..> BossEnemy

AbstractBullet <|-- HeroBullet
AbstractBullet <|-- EnemyBullet

AbstractProp <|-- Blood
AbstractProp <|-- Boom
AbstractProp <|-- Fire

PropFactory <|-- BloodFactory
PropFactory <|-- BoomFactory
PropFactory <|-- FireFactory

BloodFactory ..> Blood
BoomFactory ..> Boom
FireFactory ..> Fire


class Game{
}

class BloodFactory{
    + creatProp(int locationX, int locationY, int speedX, int speedY, int direction):AbstractProp
}

class BoomFactory{
    + creatProp(int locationX, int locationY, int speedX, int speedY, int direction):AbstractProp
}

class FireFactory{
    + creatProp(int locationX, int locationY, int speedX, int speedY, int direction):AbstractProp
}

class MobFactory{
    + creatEnemy(int locationX, int locationY, int speedX, int speedY, int hp):AbstractAircraft
}

class EliteFactory{
    + creatEnemy(int locationX, int locationY, int speedX, int speedY, int hp):AbstractAircraft
}
class BossFactory{
    + creatEnemy(int locationX, int locationY, int speedX, int speedY, int hp):AbstractAircraft
}

class HeroAircraft {
    - int shootNum
    - int power
    - int direction
    - HeroAircraft heroAircraft
    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp):void
    + getHeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp):HeroAircraft
    + forward():void
    + shoot():List<Bullet>
}

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp):void
    + forward():void
    + shoot():List<Bullet>
}

class EliteEnemy{
    - shootNum2
    - power2
    - direction2
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp):void
    + forward():void
    + shoot(): List<AbstractBullet>
    + prop():AbstractProp
}
class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power):void
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power):void
}

class Blood {
    - power
    + Blood(int locationX, int locationY, int speedX, int speedY, int direction):void
    + effect():int
}

class Boom {
    + Boom(int locationX, int locationY, int speedX, int speedY, int direction):void
    + effect():int
}

class Fire {
    + Fire(int locationX, int locationY, int speedX, int speedY, int direction):void
    + effect():int
}
@enduml